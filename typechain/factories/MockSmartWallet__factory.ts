/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from 'ethers'
import { Provider, TransactionRequest } from '@ethersproject/providers'
import { Contract, ContractFactory, Overrides } from '@ethersproject/contracts'

import type { MockSmartWallet } from '../MockSmartWallet'

export class MockSmartWallet__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer)
  }

  deploy(owner: string, overrides?: Overrides): Promise<MockSmartWallet> {
    return super.deploy(owner, overrides || {}) as Promise<MockSmartWallet>
  }
  getDeployTransaction(
    owner: string,
    overrides?: Overrides,
  ): TransactionRequest {
    return super.getDeployTransaction(owner, overrides || {})
  }
  attach(address: string): MockSmartWallet {
    return super.attach(address) as MockSmartWallet
  }
  connect(signer: Signer): MockSmartWallet__factory {
    return super.connect(signer) as MockSmartWallet__factory
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): MockSmartWallet {
    return new Contract(address, _abi, signerOrProvider) as MockSmartWallet
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'permissionHash',
        type: 'bytes32',
      },
      {
        internalType: 'bytes',
        name: 'signature',
        type: 'bytes',
      },
    ],
    name: 'isValidSignature',
    outputs: [
      {
        internalType: 'bytes4',
        name: '',
        type: 'bytes4',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
]

const _bytecode =
  '0x608060405234801561001057600080fd5b506040516106793803806106798339818101604052602081101561003357600080fd5b5051600080546001600160a01b039092166001600160a01b0319909216919091179055610614806100656000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80631626ba7e14610030575b600080fd5b6100dd6004803603604081101561004657600080fd5b8135919081019060408101602082013564010000000081111561006857600080fd5b82018360208201111561007a57600080fd5b8035906020019184600183028401116401000000008311171561009c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610112945050505050565b604080517fffffffff000000000000000000000000000000000000000000000000000000009092168252519081900360200190f35b600061012661011f61015a565b8484610169565b610131576000610153565b7f1626ba7e000000000000000000000000000000000000000000000000000000005b9392505050565b6000546001600160a01b031690565b600061017484610396565b15610370576000631626ba7e60e01b9050600080866001600160a01b03168387876040516024018083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156101db5781810151838201526020016101c3565b50505050905090810190601f1680156102085780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009098169790971787525181519196909550859450925090508083835b602083106102995780518252601f19909201916020918201910161027a565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d80600081146102f9576040519150601f19603f3d011682016040523d82523d6000602084013e6102fe565b606091505b50915091508180156103665750827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681806020019051602081101561034057600080fd5b50517fffffffff0000000000000000000000000000000000000000000000000000000016145b9350505050610153565b836001600160a01b0316610384848461039c565b6001600160a01b031614949350505050565b3b151590565b600081516041146103f4576040805162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015290519081900360640190fd5b60208201516040830151606084015160001a6104128682858561041c565b9695505050505050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a082111561047d5760405162461bcd60e51b815260040180806020018281038252602281526020018061059b6022913960400191505060405180910390fd5b8360ff16601b148061049257508360ff16601c145b6104cd5760405162461bcd60e51b81526004018080602001828103825260228152602001806105bd6022913960400191505060405180910390fd5b600060018686868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015610529573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610591576040805162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015290519081900360640190fd5b9594505050505056fe45434453413a20696e76616c6964207369676e6174757265202773272076616c756545434453413a20696e76616c6964207369676e6174757265202776272076616c7565a26469706673582212205b580b3226593a82e45c9f33ec6eb8f3cd0392b392160dec085d5f4db9b7ebd964736f6c63430007060033'
