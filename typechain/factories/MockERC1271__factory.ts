/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { MockERC1271 } from "../MockERC1271";

export class MockERC1271__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(_owner: string, overrides?: Overrides): Promise<MockERC1271> {
    return super.deploy(_owner, overrides || {}) as Promise<MockERC1271>;
  }
  getDeployTransaction(
    _owner: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(_owner, overrides || {});
  }
  attach(address: string): MockERC1271 {
    return super.attach(address) as MockERC1271;
  }
  connect(signer: Signer): MockERC1271__factory {
    return super.connect(signer) as MockERC1271__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockERC1271 {
    return new Contract(address, _abi, signerOrProvider) as MockERC1271;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "permissionHash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "isValidSignature",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516106b73803806106b78339818101604052602081101561003357600080fd5b5051600080546001600160a01b039092166001600160a01b0319909216919091179055610652806100656000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80631626ba7e1461003b5780638da5cb5b1461011d575b600080fd5b6100e86004803603604081101561005157600080fd5b8135919081019060408101602082013564010000000081111561007357600080fd5b82018360208201111561008557600080fd5b803590602001918460018302840111640100000000831117156100a757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610141945050505050565b604080517fffffffff000000000000000000000000000000000000000000000000000000009092168252519081900360200190f35b610125610189565b604080516001600160a01b039092168252519081900360200190f35b600061015561014e610198565b84846101a7565b610160576000610182565b7f1626ba7e000000000000000000000000000000000000000000000000000000005b9392505050565b6000546001600160a01b031681565b6000546001600160a01b031690565b60006101b2846103d4565b156103ae576000631626ba7e60e01b9050600080866001600160a01b03168387876040516024018083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610219578181015183820152602001610201565b50505050905090810190601f1680156102465780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009098169790971787525181519196909550859450925090508083835b602083106102d75780518252601f1990920191602091820191016102b8565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d8060008114610337576040519150601f19603f3d011682016040523d82523d6000602084013e61033c565b606091505b50915091508180156103a45750827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681806020019051602081101561037e57600080fd5b50517fffffffff0000000000000000000000000000000000000000000000000000000016145b9350505050610182565b836001600160a01b03166103c284846103da565b6001600160a01b031614949350505050565b3b151590565b60008151604114610432576040805162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015290519081900360640190fd5b60208201516040830151606084015160001a6104508682858561045a565b9695505050505050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156104bb5760405162461bcd60e51b81526004018080602001828103825260228152602001806105d96022913960400191505060405180910390fd5b8360ff16601b14806104d057508360ff16601c145b61050b5760405162461bcd60e51b81526004018080602001828103825260228152602001806105fb6022913960400191505060405180910390fd5b600060018686868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015610567573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166105cf576040805162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015290519081900360640190fd5b9594505050505056fe45434453413a20696e76616c6964207369676e6174757265202773272076616c756545434453413a20696e76616c6964207369676e6174757265202776272076616c7565a2646970667358221220a3ec30fd0fe99bf07be05d6324ab859e3637ae0bec8035949ab0d687de01931c64736f6c63430007060033";
