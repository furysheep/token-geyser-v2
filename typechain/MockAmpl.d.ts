/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface MockAmplInterface extends ethers.utils.Interface {
  functions: {
    'name()': FunctionFragment
    'approve(address,uint256)': FunctionFragment
    'initialize(string,string,uint8)': FunctionFragment
    'totalSupply()': FunctionFragment
    'transferFrom(address,address,uint256)': FunctionFragment
    'decimals()': FunctionFragment
    'increaseAllowance(address,uint256)': FunctionFragment
    'balanceOf(address)': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'rebase(uint256,int256)': FunctionFragment
    'setMonetaryPolicy(address)': FunctionFragment
    'owner()': FunctionFragment
    'monetaryPolicy()': FunctionFragment
    'isOwner()': FunctionFragment
    'symbol()': FunctionFragment
    'decreaseAllowance(address,uint256)': FunctionFragment
    'transfer(address,uint256)': FunctionFragment
    'allowance(address,address)': FunctionFragment
    'transferOwnership(address)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'name', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'approve',
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [string, string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'totalSupply',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [string, string, BigNumberish],
  ): string
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'rebase',
    values: [BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'setMonetaryPolicy',
    values: [string],
  ): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'monetaryPolicy',
    values?: undefined,
  ): string
  encodeFunctionData(functionFragment: 'isOwner', values?: undefined): string
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'allowance',
    values: [string, string],
  ): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string],
  ): string

  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'transferFrom',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'increaseAllowance',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'rebase', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'setMonetaryPolicy',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'monetaryPolicy',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'isOwner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'decreaseAllowance',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result

  events: {
    'LogRebase(uint256,uint256)': EventFragment
    'LogMonetaryPolicyUpdated(address)': EventFragment
    'OwnershipRenounced(address)': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
    'Transfer(address,address,uint256)': EventFragment
    'Approval(address,address,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'LogRebase'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogMonetaryPolicyUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipRenounced'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment
}

export class MockAmpl extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: MockAmplInterface

  functions: {
    name(overrides?: CallOverrides): Promise<[string]>

    'name()'(overrides?: CallOverrides): Promise<[string]>

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'approve(address,uint256)'(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'initialize(string,string,uint8)'(
      name: string,
      symbol: string,
      decimals: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'initialize(address)'(
      owner_: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>

    'totalSupply()'(overrides?: CallOverrides): Promise<[BigNumber]>

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'transferFrom(address,address,uint256)'(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    decimals(overrides?: CallOverrides): Promise<[number]>

    'decimals()'(overrides?: CallOverrides): Promise<[number]>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    balanceOf(who: string, overrides?: CallOverrides): Promise<[BigNumber]>

    'balanceOf(address)'(
      who: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>

    'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>

    rebase(
      epoch: BigNumberish,
      supplyDelta: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'rebase(uint256,int256)'(
      epoch: BigNumberish,
      supplyDelta: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    setMonetaryPolicy(
      monetaryPolicy_: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'setMonetaryPolicy(address)'(
      monetaryPolicy_: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    owner(overrides?: CallOverrides): Promise<[string]>

    'owner()'(overrides?: CallOverrides): Promise<[string]>

    monetaryPolicy(overrides?: CallOverrides): Promise<[string]>

    'monetaryPolicy()'(overrides?: CallOverrides): Promise<[string]>

    isOwner(overrides?: CallOverrides): Promise<[boolean]>

    'isOwner()'(overrides?: CallOverrides): Promise<[boolean]>

    symbol(overrides?: CallOverrides): Promise<[string]>

    'symbol()'(overrides?: CallOverrides): Promise<[string]>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'transfer(address,uint256)'(
      to: string,
      value: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    allowance(
      owner_: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    'allowance(address,address)'(
      owner_: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>
  }

  name(overrides?: CallOverrides): Promise<string>

  'name()'(overrides?: CallOverrides): Promise<string>

  approve(
    spender: string,
    value: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'approve(address,uint256)'(
    spender: string,
    value: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'initialize(string,string,uint8)'(
    name: string,
    symbol: string,
    decimals: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'initialize(address)'(
    owner_: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>

  'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>

  transferFrom(
    from: string,
    to: string,
    value: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'transferFrom(address,address,uint256)'(
    from: string,
    to: string,
    value: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  decimals(overrides?: CallOverrides): Promise<number>

  'decimals()'(overrides?: CallOverrides): Promise<number>

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'increaseAllowance(address,uint256)'(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  balanceOf(who: string, overrides?: CallOverrides): Promise<BigNumber>

  'balanceOf(address)'(
    who: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>

  'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>

  rebase(
    epoch: BigNumberish,
    supplyDelta: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'rebase(uint256,int256)'(
    epoch: BigNumberish,
    supplyDelta: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  setMonetaryPolicy(
    monetaryPolicy_: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'setMonetaryPolicy(address)'(
    monetaryPolicy_: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  owner(overrides?: CallOverrides): Promise<string>

  'owner()'(overrides?: CallOverrides): Promise<string>

  monetaryPolicy(overrides?: CallOverrides): Promise<string>

  'monetaryPolicy()'(overrides?: CallOverrides): Promise<string>

  isOwner(overrides?: CallOverrides): Promise<boolean>

  'isOwner()'(overrides?: CallOverrides): Promise<boolean>

  symbol(overrides?: CallOverrides): Promise<string>

  'symbol()'(overrides?: CallOverrides): Promise<string>

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'decreaseAllowance(address,uint256)'(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  transfer(
    to: string,
    value: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'transfer(address,uint256)'(
    to: string,
    value: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  allowance(
    owner_: string,
    spender: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  'allowance(address,address)'(
    owner_: string,
    spender: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  transferOwnership(
    newOwner: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'transferOwnership(address)'(
    newOwner: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  callStatic: {
    name(overrides?: CallOverrides): Promise<string>

    'name()'(overrides?: CallOverrides): Promise<string>

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>

    'approve(address,uint256)'(
      spender: string,
      value: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>

    'initialize(string,string,uint8)'(
      name: string,
      symbol: string,
      decimals: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    'initialize(address)'(
      owner_: string,
      overrides?: CallOverrides,
    ): Promise<void>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>

    'transferFrom(address,address,uint256)'(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>

    decimals(overrides?: CallOverrides): Promise<number>

    'decimals()'(overrides?: CallOverrides): Promise<number>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>

    balanceOf(who: string, overrides?: CallOverrides): Promise<BigNumber>

    'balanceOf(address)'(
      who: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>

    rebase(
      epoch: BigNumberish,
      supplyDelta: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'rebase(uint256,int256)'(
      epoch: BigNumberish,
      supplyDelta: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    setMonetaryPolicy(
      monetaryPolicy_: string,
      overrides?: CallOverrides,
    ): Promise<void>

    'setMonetaryPolicy(address)'(
      monetaryPolicy_: string,
      overrides?: CallOverrides,
    ): Promise<void>

    owner(overrides?: CallOverrides): Promise<string>

    'owner()'(overrides?: CallOverrides): Promise<string>

    monetaryPolicy(overrides?: CallOverrides): Promise<string>

    'monetaryPolicy()'(overrides?: CallOverrides): Promise<string>

    isOwner(overrides?: CallOverrides): Promise<boolean>

    'isOwner()'(overrides?: CallOverrides): Promise<boolean>

    symbol(overrides?: CallOverrides): Promise<string>

    'symbol()'(overrides?: CallOverrides): Promise<string>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>

    'transfer(address,uint256)'(
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>

    allowance(
      owner_: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'allowance(address,address)'(
      owner_: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>
  }

  filters: {
    LogRebase(epoch: BigNumberish | null, totalSupply: null): EventFilter

    LogMonetaryPolicyUpdated(monetaryPolicy: null): EventFilter

    OwnershipRenounced(previousOwner: string | null): EventFilter

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null,
    ): EventFilter

    Transfer(from: string | null, to: string | null, value: null): EventFilter

    Approval(
      owner: string | null,
      spender: string | null,
      value: null,
    ): EventFilter
  }

  estimateGas: {
    name(overrides?: CallOverrides): Promise<BigNumber>

    'name()'(overrides?: CallOverrides): Promise<BigNumber>

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    'approve(address,uint256)'(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    'initialize(string,string,uint8)'(
      name: string,
      symbol: string,
      decimals: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    'initialize(address)'(
      owner_: string,
      overrides?: Overrides,
    ): Promise<BigNumber>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    'transferFrom(address,address,uint256)'(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    decimals(overrides?: CallOverrides): Promise<BigNumber>

    'decimals()'(overrides?: CallOverrides): Promise<BigNumber>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    balanceOf(who: string, overrides?: CallOverrides): Promise<BigNumber>

    'balanceOf(address)'(
      who: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>

    'renounceOwnership()'(overrides?: Overrides): Promise<BigNumber>

    rebase(
      epoch: BigNumberish,
      supplyDelta: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    'rebase(uint256,int256)'(
      epoch: BigNumberish,
      supplyDelta: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    setMonetaryPolicy(
      monetaryPolicy_: string,
      overrides?: Overrides,
    ): Promise<BigNumber>

    'setMonetaryPolicy(address)'(
      monetaryPolicy_: string,
      overrides?: Overrides,
    ): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>

    monetaryPolicy(overrides?: CallOverrides): Promise<BigNumber>

    'monetaryPolicy()'(overrides?: CallOverrides): Promise<BigNumber>

    isOwner(overrides?: CallOverrides): Promise<BigNumber>

    'isOwner()'(overrides?: CallOverrides): Promise<BigNumber>

    symbol(overrides?: CallOverrides): Promise<BigNumber>

    'symbol()'(overrides?: CallOverrides): Promise<BigNumber>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    'transfer(address,uint256)'(
      to: string,
      value: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    allowance(
      owner_: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'allowance(address,address)'(
      owner_: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides,
    ): Promise<BigNumber>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides,
    ): Promise<BigNumber>
  }

  populateTransaction: {
    name(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'name()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'approve(address,uint256)'(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'initialize(string,string,uint8)'(
      name: string,
      symbol: string,
      decimals: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'initialize(address)'(
      owner_: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'totalSupply()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'transferFrom(address,address,uint256)'(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'decimals()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    balanceOf(
      who: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'balanceOf(address)'(
      who: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>

    'renounceOwnership()'(overrides?: Overrides): Promise<PopulatedTransaction>

    rebase(
      epoch: BigNumberish,
      supplyDelta: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'rebase(uint256,int256)'(
      epoch: BigNumberish,
      supplyDelta: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    setMonetaryPolicy(
      monetaryPolicy_: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'setMonetaryPolicy(address)'(
      monetaryPolicy_: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    monetaryPolicy(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'monetaryPolicy()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'isOwner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'symbol()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'transfer(address,uint256)'(
      to: string,
      value: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    allowance(
      owner_: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'allowance(address,address)'(
      owner_: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>
  }
}
